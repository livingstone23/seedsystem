@page "/cost"
@using Microsoft.Identity.Client
@using Microsoft.PowerBI.Api
@using Microsoft.PowerBI.Api.Models
@using Microsoft.Rest
@using OfficeOpenXml;
@using OfficeOpenXml.Style;
@using System.IO
@using blazormovie.Client.Data
@using blazormovie.Client.Pages.Client
@using blazormovie.Client.Pages.Groups
@using blazormovie.Client.Pages.Initiative
@using blazormovie.Client.Pages.POSPay
@using blazormovie.Client.Pages.Project
@using iText.IO.Font.Constants
@using iText.Kernel.Font
@using iText.Kernel.Pdf
@using iText.Layout
@using iText.Layout.Element
@inject IClientService ClientService
@inject IGroupsService groupsService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ICostService CostService
@inject IDialogService DialogService
@inject IInitiativeService InitiativeService
@inject IProjectService ProjectService
@inject IPOSPayService POSPayService
@inject IJSRuntime jsRuntime;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <iframe title="Finanzas" width="1140" height="541.25" src="https://app.powerbi.com/reportEmbed?reportId=8e950a58-42e1-4d29-ae25-de630c303ee3&autoAuth=true&ctid=b3ba5a06-38fd-4e62-9af1-7991701d0883&config=eyJjbHVzdGVyVXJsIjoiaHR0cHM6Ly93YWJpLXdlc3QtZXVyb3BlLWUtcHJpbWFyeS1yZWRpcmVjdC5hbmFseXNpcy53aW5kb3dzLm5ldC8ifQ%3D%3D" frameborder="0" allowFullScreen="true"></iframe>

        <MudTable ServerData="@(new Func<TableState, Task<TableData<Cost>>>(LoadTodos))"   Hover="true"  @ref="table">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Costs</MudText>
                <MudSpacer />

                <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    
            
                <MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Primary">
                    <MudMenuItem OnClick="@(NewCost)" >New Cost</MudMenuItem>
                    <MudMenuItem OnClick="@(NewGroup)" >New Work Team</MudMenuItem>
                    <MudMenuItem OnClick="@(NewClient)" >New Client</MudMenuItem>
                    <MudMenuItem OnClick="@(NewInitiative)" >New Initiative</MudMenuItem>
                    <MudMenuItem OnClick="@(NewProject)">New Project</MudMenuItem>
                    <MudMenuItem OnClick="@(NewPay)">New PO</MudMenuItem>
                </MudMenu>

                <MudMenu Icon="@Icons.Material.Filled.Computer" Color="Color.Success">
                   <a @onclick="exportarPdf" class= "btn btn-secondaryPdf" href="@pdf">PDF</a>
                    <a @onclick="exportarExcel" class= "btn btn-secondary" href="@excel">Excel</a>
                </MudMenu>

            </ToolBarContent>

            <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="id_field" T="Initiative">Id</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="name_field" T="Initiative">Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="des_field" T="Initiative">Description</MudTableSortLabel></MudTh>

                
                <MudTh></MudTh>
                <MudTh></MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Desc">  <a href="/groups/@context.Id">@context.Name</a></MudTd>
                <MudTd DataLabel="Nrmt">@context.Description</MudTd>
             
           
                <MudTd>
                    <MudFab OnClick="@(() => Edit(context.Id))"
                            Color="Color.Primary"
                            Icon="@Icons.Material.Filled.Edit"
                            Size="Size.Small"
                            IconSize="Size.Small">
                    </MudFab>
                </MudTd>
                

@*                <MudTd>
                    <MudFab OnClick="@(() => ProjectsByCost(context.Id))"
                            Color="Color.Primary"
                            Icon="@Icons.Material.Filled.AddToQueue"
                            Size="Size.Small"
                            IconSize="Size.Small">
                    </MudFab>
                </MudTd>*@

                <MudTd>
                    <MudFab OnClick="@(() => Delete(context.Id))"
                            Color="Color.Secondary"
                            Icon="@Icons.Material.Filled.Delete"
                            Size="Size.Small"
                            IconSize="Size.Small">
                    </MudFab>
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager PageSizeOptions="pageSizeOptions"></MudTablePager>
            </PagerContent>

        </MudTable>
    </MudItem>

</MudGrid>

@code {
    public List<Cost> Cost = new List<Cost>();
    public string Message { get; set; }
    public string excel = "";
    public string pdf = "";
    private ElementReference PowerBIElement;

    string TenantID = "b3ba5a06-38fd-4e62-9af1-7991701d0883";

    string ClientID = "4b387158-0147-421f-b0a0-15e02da8bf0a";
    string ClientSecret = "830836a0-c2b4-4f3d-820f-9ba2f16ad52d";

    string workspaceId = "6281d9c1-7a95-4e3b-aad8-96b8d930bbad";
    string reportId = "8e950a58-42e1-4d29-ae25-de630c303ee3";

    private int[] pageSizeOptions = new int[] { 15 };

    private MudTable<Cost> table;
    private IEnumerable<Cost> DataPrint = new List<Cost>();
    private string searchString = null;
    private const string AuthorityFormat = "https://login.microsoftonline.com/{0}/v2.0";
    private const string MSGraphScope = "https://analysis.windows.net/powerbi/api/.default";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        table.SetRowsPerPage(15);
         if (firstRender)
        {
            var result = new PowerBIEmbedConfig();

            // Authenticate using created credentials
            AuthenticationResult authenticationResult = null;
            authenticationResult = await DoAuthentication();

            var tokenCredentials =
                new TokenCredentials(authenticationResult.AccessToken, "Bearer");

            using (var client = new PowerBIClient(
                new Uri("https://api.powerbi.com/"), tokenCredentials))
            {
                var report = await client.Reports.GetReportInGroupAsync(
                    new Guid(workspaceId), new Guid(reportId));

                var generateTokenRequestParameters = new GenerateTokenRequest(
                    accessLevel: "view"
                    );

                var tokenResponse = await client.Reports.GenerateTokenAsync(
                    new Guid(workspaceId),
                    new Guid(reportId),
                    generateTokenRequestParameters);

                result.EmbedToken = tokenResponse;
                result.EmbedUrl = report.EmbedUrl;
                result.Id = report.Id.ToString();

                await Interop.CreateReportPaginated(
                    JSRuntime,
                    PowerBIElement,
                    tokenResponse.Token,
                    report.EmbedUrl,
                    report.Id.ToString());

            }
        }
        //return  await base.OnAfterRenderAsync(firstRender);
    }
    private async Task<AuthenticationResult> DoAuthentication()
    {
        IConfidentialClientApplication daemonClient;
        daemonClient = ConfidentialClientApplicationBuilder.Create(ClientID)
            .WithAuthority(string.Format(AuthorityFormat, TenantID))
            .WithClientSecret(ClientSecret)
            .Build();
        AuthenticationResult authResult =
            await daemonClient.AcquireTokenForClient(new[] { MSGraphScope }).ExecuteAsync();
        return authResult;
    }
    public async Task<TableData<Cost>> LoadTodos(TableState state)
    {


        var response = await CostService.GetByPagination((state.Page + 1), state.PageSize);


        response.Data = response.Data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            return false;
        }).ToArray();

        switch (state.SortLabel)
        {
            case "id_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.Id);
                break;
            case "name_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
            case "des_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.Description);
                break;

        }


        DataPrint = response.Data;

        return new TableData<Cost>() { Items = response.Data, TotalItems = response.TotalRecords };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    protected async Task Edit(int id)
    {
        //creamos objeto dialogparameters para pasarle parametros a la vista modal
        DialogParameters oParam = new DialogParameters();
        oParam.Add("costId",id);
        var dialog = DialogService.Show<CostModal>("Edit Cost",oParam,null);

        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var Cost = (Cost)result.Data;
            if (Cost.Name != null)
            {
                Cost.Id = id;
                await  CostService.Save(Cost);
                await table.ReloadServerData();
                Snackbar.Add("Cost has been modified.", MudBlazor.Severity.Success, a => a.VisibleStateDuration = 400);
            }
        }
    }

    protected async Task Delete(int id)
    {
        Cost costToDelete =  await CostService.GetById(id);
        int projectsCount = costToDelete?.Projects.Count ?? 0;

        if (projectsCount > 0)
        {
            Snackbar.Add($"The Cost can't been deleted, Cause it has {projectsCount} Projects asigned. ", MudBlazor.Severity.Warning, a => a.VisibleStateDuration = 550);
        }
        else
        {
            await CostService.Delete(id);
            await table.ReloadServerData();
            Snackbar.Add("The Cost has been deleted.", MudBlazor.Severity.Success, a => a.VisibleStateDuration = 350);
        }
    }

    protected void ProjectsByCost(int id)
    {
        NavigationManager.NavigateTo($"/costdetail/{id}");
    }

    protected async Task NewCost()
    {
        var dialog = DialogService.Show<CostModal>("New Cost");
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var Cost = (Cost)result.Data;
            if (Cost.Name != null)
            {
                await  CostService.Save(Cost);
                await table.ReloadServerData();
                Snackbar.Add("The Cost has been added.", MudBlazor.Severity.Success, a => a.VisibleStateDuration = 400);
            }
        }
    }

    protected async Task NewClient()
    {
        var dialog = DialogService.Show<ClientModal>("New Client");
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var Client = (Client)result.Data;
            if (Client.Name != null)
            {
                await  ClientService.Save(Client);
                await table.ReloadServerData();
                Snackbar.Add("The Client has been added.", MudBlazor.Severity.Success, a => a.VisibleStateDuration = 400);
            }
        }

    }

    protected async Task NewGroup()
    {
        var dialog = DialogService.Show<GroupsModal>("New Group");
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var Group = (blazormovie.Shared.SeedEntities.Group)result.Data;
            if (Group.Name != null)
            {
                await  groupsService.Save(Group);
                await table.ReloadServerData();
                Snackbar.Add("The Group has been added.", MudBlazor.Severity.Success, a => a.VisibleStateDuration = 400);
            }
        }

    }
    protected async Task NewInitiative()
    {
        var dialog = DialogService.Show<InitiativeModal>("New Initiative");
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var Initiative = (Initiative)result.Data;
            if (Initiative.Name != null)
            {
                await  InitiativeService.SaveInitiative(Initiative);
                await table.ReloadServerData();
                Snackbar.Add("The Initiative has been added.", MudBlazor.Severity.Success, a => a.VisibleStateDuration = 400);
            }
        }

    }

    protected async Task NewProject()
    {
        var dialog = DialogService.Show<ProjectModal>("New Project");
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var Project = (Project)result.Data;
            if (Project.Name != null)
            {
                await ProjectService.SaveProject(Project);
                await table.ReloadServerData();
                Snackbar.Add("The Project has been added.", MudBlazor.Severity.Success, a => a.VisibleStateDuration = 400);
            }
        }
    }


    protected async Task NewPay()
    {
        var dialog = DialogService.Show<POSPayModal>("New POSPay");
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var pOSPay = (POSPay)result.Data;
            if (pOSPay.IdInitiative != null)
            {
                await  POSPayService.SavePOSPay(pOSPay);
                await table.ReloadServerData();
                Snackbar.Add("The PO has been added.", MudBlazor.Severity.Success, a => a.VisibleStateDuration = 400);
            }

        }
    }

    public void exportarPdf()
    {
        using (MemoryStream ms = new MemoryStream())
        {
            PdfWriter writer = new PdfWriter(ms);
            using(var pdfDoc = new PdfDocument(writer))
            {
                //Rellenar Pdf
                Document doc = new Document(pdfDoc);

                Paragraph p1 = new Paragraph("Report");
                p1.SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER);
                p1.SetFontSize(20);
                doc.Add(p1);
                //creamos las cabeceras
                PdfFont font = PdfFontFactory.CreateFont(StandardFonts.HELVETICA_BOLD);
                iText.Layout.Element.Table tabla = new iText.Layout.Element.Table(2).UseAllAvailableWidth();
                Cell celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("Name")).SetFont(font);
                tabla.AddHeaderCell(celda);
                celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("Description")).SetFont(font);
                tabla.AddHeaderCell(celda);

                foreach(var item in DataPrint)
                {
                    celda = new Cell();
                    celda.Add(new Paragraph(item.Name.ToString()));
                    tabla.AddCell(celda);
                    celda = new Cell();
                    celda.Add(new Paragraph(item.Description.ToString()));
                    tabla.AddCell(celda);

                }
                doc.Add(tabla);
                //liberamos memoria
                doc.Close();
                writer.Close();
                //para descargar
                byte[] buffer = ms.ToArray();
                string base64 = Convert.ToBase64String(buffer);
                pdf = "data:application/pdf;base64,"+base64;
                jsRuntime.InvokeVoidAsync("descargarPdf", pdf);
            }

        }
    }
    public void exportarExcel()
    {
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        using(MemoryStream ms = new MemoryStream())
        {
            try
            {
                using (ExcelPackage ep = new ExcelPackage())
                {
                    ep.Workbook.Worksheets.Add("hoja");
                    //solo para una hoja
                    ExcelWorksheet ew = ep.Workbook.Worksheets[0];
                    ew.Column(1).Width = 50;
                    ew.Cells[1, 1].RichText.Add("Description").Bold = true;
                    ew.Column(2).Width = 50;
                    ew.Cells[1, 2].RichText.Add("Name").Bold = true;
               
                    int fila = 2;
                    foreach(var item in DataPrint)
                    {

                        ew.Cells[fila, 1].Value = item.Name.ToString();
                        ew.Cells[fila, 2].Value = item.Description.ToString();
                    
                        fila++;
                    }

                    ep.SaveAs(ms);
                    byte[] buffer = ms.ToArray();
                    string base64 = Convert.ToBase64String(buffer);
                    excel = "data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64," + base64;
                }
            }catch(Exception ex)
            {
                Snackbar.Add(ex.Message, MudBlazor.Severity.Success, a => a.VisibleStateDuration = 1000);
            }
            
        }
    }
    
}
