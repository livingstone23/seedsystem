@page "/groups"
@inject IGroupsService GroupsService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudGrid>
    <MudItem xs="12" sm="12" md="12">
    
         <MudTable ServerData="@(new Func<TableState, Task<TableData<Group>>>(LoadTodos))"   Hover="true"  @ref="table">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Groups</MudText>
                <MudSpacer />

                <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    
            
                <MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Primary">
                    <MudMenuItem OnClick="@(NewGroup)" >New Group</MudMenuItem>
                </MudMenu>

                <MudMenu Icon="@Icons.Material.Filled.Computer" Color="Color.Success">
                   
                </MudMenu>

            </ToolBarContent>

             <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="id_field" T="Initiative">Id</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="name_field" T="Initiative">Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="des_field" T="Initiative">Description</MudTableSortLabel></MudTh>

                
                <MudTh></MudTh>
                <MudTh></MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Desc">@context.Name</MudTd>
                <MudTd DataLabel="Nrmt">@context.Description</MudTd>
             
           
                <MudTd>
                    <MudFab OnClick="@(() => Edit(context.Id))"
                            Color="Color.Primary"
                            Icon="@Icons.Material.Filled.Edit"
                            Size="Size.Small"
                            IconSize="Size.Small">
                    </MudFab>
                </MudTd>
                <MudTd>
                    <MudFab OnClick="@(() => Delete(context.Id))"
                            Color="Color.Secondary"
                            Icon="@Icons.Material.Filled.Delete"
                            Size="Size.Small"
                            IconSize="Size.Small">
                    </MudFab>
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager PageSizeOptions="pageSizeOptions"></MudTablePager>
            </PagerContent>

         </MudTable>
     </MudItem>
</MudGrid>










@code {

    public List<Group> Groups;
    public string Message { get; set; }
    public string excel = "";
    public string pdf = "";

    private int[] pageSizeOptions = new int[] { 15 };

    private MudTable<Group> table;

    private IEnumerable<Group> DataPrint = new List<Group>();

    private string searchString = null;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        table.SetRowsPerPage(15);
        return base.OnAfterRenderAsync(firstRender);
    }

    public async Task<TableData<Group>> LoadTodos(TableState state)
    {

        var response = await GroupsService.GetByPagination((state.Page + 1), state.PageSize);

        response.Data = response.Data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            
            return false;
        }).ToArray();
    //totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "id_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.Id);
                break;
            case "name_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
            case "des_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.Description);
                break;

        }


        DataPrint = response.Data;

        return new TableData<Group>() { Items = response.Data, TotalItems = response.TotalRecords };
    }


    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    protected async Task Edit(int id)
    {
    //creamos objeto dialogparameters para pasarle parametros a la vista modal
        DialogParameters oParam = new DialogParameters();
        oParam.Add("groupId",id);
        var dialog = DialogService.Show<GroupsModal>("Edit Group",oParam,null);
        
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado
        
        if(!result.Cancelled)
        {
            var Group = (Group)result.Data;
            if (Group.Name != null)
            {
                Group.Id = id;
                await  GroupsService.Save(Group);
                table.ReloadServerData();
                Snackbar.Add("Group has been modified.", MudBlazor.Severity.Success, a => a.VisibleStateDuration = 400);
            }
        }
    }

    protected async Task Delete(int id)
    {
        Group groupfound = new Group();
        groupfound = DataPrint.Where(a => a.Id == id).FirstOrDefault();
        
        await GroupsService.Delete(id);
        table.ReloadServerData();
        Snackbar.Add("The Group has been deleted.", MudBlazor.Severity.Success, a => a.VisibleStateDuration = 350);

    }

    protected async Task NewGroup()
    {
        var dialog = DialogService.Show<GroupsModal>("New Group");
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var Group = (Group)result.Data;
            if (Group.Name != null)
            {
                await  GroupsService.Save(Group);
                table.ReloadServerData();
                Snackbar.Add("The Group has been added.", MudBlazor.Severity.Success, a => a.VisibleStateDuration = 400);
            }
        }

    }

}
