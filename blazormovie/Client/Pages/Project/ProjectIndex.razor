@page "/projects"
@using System.IO
@using OfficeOpenXml
@using iText.IO.Font.Constants
@using iText.Kernel.Font
@using iText.Layout
@using iText.Layout.Element
@using iText.Pdfa;
@using iText.Kernel.Pdf;
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IJSRuntime jsRuntime;
@using blazormovie.Client.Pages.Initiative
@using blazormovie.Client.Pages.Project
@using blazormovie.Client.Pages.POSPay
@inject IInitiativeService InitiativeService
@inject IPOSPayService POSPayService





    <a @onclick="exportarPdf" class= "btn btn-secondaryPdf" href="@pdf">PDF</a>
    <a @onclick="exportarExcel" class= "btn btn-secondary" href="@excel">Excel</a>

<MudDrawer @bind-Open="@open" Width="@width" Height="@height" Anchor="@anchor" Elevation="1" Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">New Documents</MudText>
    </MudDrawerHeader>
    <MudNavMenu>
        <MudNavLink Match="NavLinkMatch.All" OnClick="@(NewInitiative)" Icon="@Icons.Filled.Store">Iniciative</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" OnClick="@(NewProject)" Icon="@Icons.Filled.LocalLibrary">Project</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" OnClick="@(NewPay)"  Icon="@Icons.Filled.Payment">Pays</MudNavLink>

    </MudNavMenu>

    <MudDrawerHeader>
        <MudText Typo="Typo.h6">Print Budget</MudText>
    </MudDrawerHeader>

    <MudNavMenu>
        <a @onclick="exportarPdf" class= "btn btn-secondaryPdf" href="@pdf">PDF</a>
        <a @onclick="exportarExcel" class= "btn btn-secondary" href="@excel">Excel</a>
    </MudNavMenu>
</MudDrawer>

<MudGrid>

    <MudItem xs="12" sm="12" md="12">
        <MudTable ServerData="@(new Func<TableState, Task<TableData<Project>>>(LoadTodos))"   Hover="true"  @ref="table">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Projects</MudText>
            <MudSpacer />

            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.NewLabel" Color="Color.Primary" OnClick="@(() => OpenDrawer(Anchor.End))">New Documents</MudButton>

        </ToolBarContent>

        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="id_field" T="POSPayDTO">Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="name_field" T="POSPayDTO">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="des_field" T="POSPayDTO">Description</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="amo_field" T="POSPayDTO">Amount Defined</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="num_field" T="POSPayDTO">Number of POs</MudTableSortLabel></MudTh>

        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Desc">@context.Name</MudTd>
            <MudTd DataLabel="Nrmt">@context.Description</MudTd>
            <MudTd DataLabel="Pay">@context.AmountDefined</MudTd>
            <MudTd DataLabel="Day">@context.TotalPays</MudTd>
          
        </RowTemplate>


        <PagerContent>
            <MudTablePager PageSizeOptions="pageSizeOptions"></MudTablePager>
        </PagerContent>

        </MudTable>
    </MudItem>




</MudGrid>	












     



@code {

    bool open;
    Anchor anchor;
    string width, height;

    void OpenDrawer(Anchor anchor)
    {
        open = true;
        this.anchor = anchor;

        switch (anchor)
        {
            
            case Anchor.End:
                width = "400px";
                height = "100%";
                break;
            
        }
    }


    public List<Project> Projects;
    public string Message { get; set; }
    public string excel = "";
    public string pdf = "";

    //protected async override Task OnInitializedAsync()
    //{
    //    try
    //    {
    //        Projects = (List<Project>)await ProjectService.GetProjects();
    //    }
    //    catch (Exception e)
    //    {

    //        Message = "Error... " + e.Message;
    //    }
    //}

    private int[] pageSizeOptions = new int[] { 5, 10, 15 };

    private MudTable<Project> table;

    private IEnumerable<Project> DataPrint = new List<Project>();

    private string searchString = null;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        table.SetRowsPerPage(5);
        return base.OnAfterRenderAsync(firstRender);
    }

    public async Task<TableData<Project>> LoadTodos(TableState state)
    {


        var response = await ProjectService.GetByPagination((state.Page + 1), state.PageSize);

        response.Data = response.Data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{element.AmountDefined}".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        //totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "id_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.Id);
                break;
            case "name_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
            case "des_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.Description);
                break;
            case "amo_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.AmountDefined);
                break;
         }


        DataPrint = response.Data;

        return new TableData<Project>() { Items = response.Data, TotalItems = response.TotalRecords };
    }


    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    protected async Task Edit(int id)
    {
        NavigationManager.NavigateTo($"/projectdetail/{id}");
    }

    protected async Task Delete(int id)
    {
        //await ProjectService.DeleteOrder(id);
        //Orders.RemoveAll(p => p.Id == id);
    }



    public void exportarPdf()
    {
        using (MemoryStream ms = new MemoryStream())
        {
            PdfWriter writer = new PdfWriter(ms);
            using(var pdfDoc = new PdfDocument(writer))
            {
                //Rellenar Pdf
                Document doc = new Document(pdfDoc);
                Paragraph p1 = new Paragraph("Report");
                p1.SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER);
                p1.SetFontSize(20);
                doc.Add(p1);
                //creamos las cabeceras
                PdfFont font = PdfFontFactory.CreateFont(StandardFonts.HELVETICA_BOLD);
                Table tabla = new Table(4).UseAllAvailableWidth();
                Cell celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("Name")).SetFont(font);
                tabla.AddHeaderCell(celda);
                celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("Description")).SetFont(font);
                tabla.AddHeaderCell(celda);
                celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("Amount Defined")).SetFont(font);
                tabla.AddHeaderCell(celda);
                 celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("Number of Pays")).SetFont(font);
                tabla.AddHeaderCell(celda);
                foreach(var item in Projects)
                {
                    celda = new Cell();
                    celda.Add(new Paragraph(item.Name.ToString()));
                    tabla.AddCell(celda);
                    celda = new Cell();
                    celda.Add(new Paragraph(item.Description.ToString()));
                    tabla.AddCell(celda);
                    celda = new Cell();
                    celda.SetHorizontalAlignment(iText.Layout.Properties.HorizontalAlignment.RIGHT);
                    celda.Add(new Paragraph(item.AmountDefined.ToString("N2")+" €"));
                    tabla.AddCell(celda);
                    celda = new Cell();
                    celda.Add(new Paragraph(item.POSPays.Count().ToString()));
                    tabla.AddCell(celda);
                }
                doc.Add(tabla);
                //liberamos memoria
                doc.Close();
                writer.Close();
                //para descargar
                byte[] buffer = ms.ToArray();
                string base64 = Convert.ToBase64String(buffer);
                pdf = "data:application/pdf;base64,"+base64;
                jsRuntime.InvokeVoidAsync("descargarPdf", pdf);
            }

        }
    }

    public void exportarExcel()
    {
        using(MemoryStream ms = new MemoryStream())
        {
            using (ExcelPackage ep = new ExcelPackage())
            {
                ep.Workbook.Worksheets.Add("hoja");
                //solo para una hoja
                ExcelWorksheet ew = ep.Workbook.Worksheets[0];
                ew.Column(1).Width = 50;
                ew.Cells[1, 1].RichText.Add("Name").Bold = true;
                ew.Column(2).Width = 50;
                ew.Cells[1, 2].RichText.Add("Description").Bold = true;
                ew.Column(3).Width = 50;
                ew.Cells[1, 3].RichText.Add("AmountDefined").Bold =true ;
                ew.Column(4).Width = 50;
                ew.Cells[1, 4].RichText.Add("Number of Pays").Bold =true ;
                int fila = 2;
                int colum = 1;
                //List<Initiative> ltInis = Initiatives.ToList();
                foreach(var item in Projects)
                {

                    ew.Cells[fila, 1].Value = item.Name.ToString();
                    ew.Cells[fila, 2].Value = item.Description.ToString();
                    ew.Cells[fila, 3].Value = item.AmountDefined.ToString();
                    ew.Cells[fila, 4].Value = item.TotalPays.ToString();
                    fila++;
                }

                ep.SaveAs(ms);
                byte[] buffer = ms.ToArray();
                string base64 = Convert.ToBase64String(buffer);
                excel = "data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64," + base64;
            }
         
        }
    }

     protected async Task NewProject()
    {
        var dialog = DialogService.Show<ProjectModal>("New Project");
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var Project = (Project)result.Data;
            if (Project.Name != null)
                await ProjectService.SaveProject(Project);
        }

    }

    protected async Task NewInitiative()
    {
        var dialog = DialogService.Show<InitiativeModal>("New Initiative");
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var Initiative = (Initiative)result.Data;
            if (Initiative.Name != null)
                await  InitiativeService.SaveInitiative(Initiative);
        }

    }

    protected async Task NewPay()
    {
        var dialog = DialogService.Show<POSPayModal>("New POSPay");
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var pOSPay = (POSPay)result.Data;
            if (pOSPay.IdInitiative != null)
                await  POSPayService.SavePOSPay(pOSPay);
        }

    }


}
