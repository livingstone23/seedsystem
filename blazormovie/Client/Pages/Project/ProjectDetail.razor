@page "/projectdetail"
@page "/projectdetail/{id:int}"
@inject IInitiativeService InitiativeService
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<p>@Message</p>


@if (Project != null && initiatives != null)
{
    <EditForm Model=@Project OnValidSubmit="SaveProject">

        <div class="card">
            <h5 class="card-header">Project Details</h5>
            @*cuerpo de la clase*@
            <div class="card-body">
                <div class="container">
                    <div class="row">
                        <div class="col-md-4">

                        </div>

                        <div class="col-md-6">
                            <input type="button" class="btn btn-secondary" value="Add Cost" @onclick="AddCost"/>
                            <input type="submit" class="btn btn-secondary" value="Save Cost" @onclick="SaveCost"/>
                             
                        </div>

                        <div class="col-md-4 mb-3">

                        </div>

                    </div>
               


                
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="">Name</label>
                            <InputText class="form-control" @bind-Value="@Project.Name" />
                        </div>
                        
                        <div class="col-md-6 mb-3">
                            <label for="">Description</label>
                            <InputText class="form-control" @bind-Value="@Project.Description" />
                        </div>
                    </div>
              

               
                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label for="">Initiative</label>
                            <InputSelect class="form-control" @bind-Value="@Project.IdInitiative">
                                @foreach (var item in initiatives)
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
               

               
                    <div class="row">
                        <div class="col-md-6 mb-3">
                        </div>
                        <div class="col-md-6 mb-3">
                            <MudTextField @bind-Value="Project.AmountDefined" Label="Pay Amount" Variant="Variant.Text" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney"/>
                        </div>
                    </div>
               
                    <div class="row">
           
                        <div class="col-md-4 mb-3">

                        </div>
                        <div class="col-md-4 mb-3">
                        </div>
@*                        <div class="col-md-4 mb-3">
                                <input type="submit" class="btn btn-secondary" value="New Project" @onclick="NewProject"/>
                        </div>*@
                    </div>
                </div>
            </div>
        </div>


        @if(Project.POSPays != null && Project.POSPays.Any())
        {
            <MudTable Items="@Project.POSPays" Hover = "true" Breakpoint="Breakpoint.Sm">
                 <ToolBarContent>
                     <MudText typeof="Typo.h6">Pays</MudText>
                 </ToolBarContent>
                 <HeaderContent>
                     <MudTh>DescriptionPOS</MudTh>
                     <MudTh>Number Transfer</MudTh>
                     <MudTh>Amount</MudTh>
                     <MudTh>Day</MudTh>
                 </HeaderContent>
                 <RowTemplate Context="POSPaysContext">
                     <MudTd DataLabel="Name">@POSPaysContext.DescriptionPOS </MudTd>
                     <MudTd DataLabel="Price">@POSPaysContext.NumberTransfer </MudTd>
                     <MudTd DataLabel="Quantity" Style="text-align:center">@POSPaysContext.PayAmount.ToString("C") </MudTd>
                     <MudTd DataLabel="Day">@POSPaysContext.PayDay</MudTd>
                 </RowTemplate>
             </MudTable>
        }
        @if (Project.Costs != null && Project.Costs.Any())
        {

            <MudTable Items="@Project.Costs" Hover = "true" Breakpoint="Breakpoint.Sm">
                <ToolBarContent>
                    <MudText typeof="Typo.h6">Costs</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh>Amount</MudTh>
                </HeaderContent>
                <RowTemplate Context="CostContext">
                    <MudTd DataLabel="Name">@CostContext.Name </MudTd>
                    <MudTd DataLabel="Description">@CostContext.Description</MudTd>
                    <MudTd DataLabel="Amount">@CostContext.Amount 
                        <MudIcon Icon="@Icons.Material.Filled.Euro" Color="Color.Primary" Class="mx-4" Style="width:21px; height:21px;"></MudIcon>
                    </MudTd>
                    <MudTd DataLabel="Date">@CostContext.DateOfCost</MudTd>
                    <MudTd DataLabel="">
                        <MudFab OnClick="@(() => RemoveProduct(CostContext.Id))"
                                Color="Color.Secondary"
                                Icon="@Icons.Material.Filled.Delete"
                                IconSize="Size.Small">

                        </MudFab>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }

@*        
        <InputSelect class="form-control col-sm-5" @bind-Value="@Project.IdInitiative">
            @foreach (var item in initiatives)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </InputSelect>
*@

    </EditForm>
}
else
{
    <p>Loading...</p>
}

@code {

    public Project Project;

    public IEnumerable<Initiative> initiatives;

    public string Message  { get; set; }

    [Parameter] 
    public int id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            if(id >0)
            {
                Project = await ProjectService.GetById(id);
            } 
            else
            {
                Project = new Project();
            }
            initiatives = await InitiativeService.GetInitiatives();

        }
        catch(Exception e)
        {
            Message = "There was an error..." + e.Message;
        }
    }
    protected async Task RemoveProduct(int costId)
    {
        Project.Costs.RemoveAll(p => p.Id == costId);
    }
    protected async Task SaveProject()
    {
        await ProjectService.SaveProject(Project);
        if(Project.Name != null)
        {
            NavigateToHome();
        }

    }

    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/projects");
    }

    protected void Cancel()
    {
        NavigateToHome();
    }
    protected async Task AddCost()
    {
        var dialog = DialogService.Show<ProjectWithCost>("Cost by Project");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var cost = (Cost)result.Data;
            ProjectCost oCost = new ProjectCost();
            oCost.CostId = cost.Id;
            oCost.DateOfCost = DateTime.Now;
            oCost.ProjectId = Project.Id;
            oCost.Name = cost.Name;
            oCost.Description = cost.Description;
            Project.Costs.Add(oCost);
            oCost = null;
        }
    }   
    protected async Task SaveCost()
    {
        
    }
    //protected async Task NewProject()
    //{
    //    var dialog = DialogService.Show<ProjectModal>("New Project");
    //    var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

    //    if(!result.Cancelled)
    //    {
    //        var Project = (Project)result.Data;
    //        if (Project.Name != null)
    //            await ProjectService.SaveProject(Project);
    //    }
    //}



}
