@inject IInitiativeService InitiativeService
@inject IProjectService ProjectService
@inject ISnackbar Snackbar
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using FluentValidation
@using MudBlazor



<MudDialog> 


    <DialogContent>
         <EditForm Model="@Project" OnValidSubmit="@OnValidSubmit" >
             <DataAnnotationsValidator />


             <div style="max-width: 100%;">
                <MudCard>
                    <MudCardContent>

			
                            <MudTextField T="string" @bind-Value="@Project.Name" Label="Name" For="@(() => Project.Name)"/>
                
				            <MudTextField T="string" @bind-Value="@Project.Description" Label="Description"/>

                            <label for="">Initiative</label>				
                            <ValidationMessage For="@(() => Project.IdInitiative)" />
				            <InputSelect class="form-control" @bind-Value="@Project.IdInitiative">
					            @foreach (var item in initiatives)
					            {
						            <option value="@item.Id">@item.Name</option>
					            }
				            </InputSelect>
								
				            <MudNumericField Label="Amount Defined" @bind-Value="@Project.AmountDefined" For="(() => Project.AmountDefined)" Validation=@(orderDetailsValidator.ValidateValue) />				

                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit"  Variant="Variant.Filled" Color="Color.Warning" OnClick="Cancel">Cancel</MudButton>
                        <MudButton ButtonType="ButtonType.Submit"    Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                    </MudCardActions>
                </MudCard>
    
            </div>
             
         </EditForm>

    </DialogContent>

</MudDialog>



@code {

    bool success;

    string[] errors = { };
    [Parameter] 
    public int iProjectId { get; set; }
    OrderDetailsModelFluentValidator orderDetailsValidator = new OrderDetailsModelFluentValidator();


    public class OrderDetailsModelFluentValidator : AbstractValidator<Project>
    {
        public OrderDetailsModelFluentValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty()
                .Length(1,100);

            RuleFor(x => x.AmountDefined)
                .GreaterThan(0)
                .LessThan(999);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Project>.CreateWithOptions((Project)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
            {
                return Array.Empty<string>();
            } 
            else
            {
                return result.Errors.Select(e => e.ErrorMessage);
            }


        };
    }



    public Project Project = new Project();
    public IEnumerable<Initiative> initiatives =  new List<Initiative>();

    public string Message  { get; set; }

    [CascadingParameter] 
    MudDialogInstance MudDialog {get;set;}

    protected async override Task OnInitializedAsync()
    {
        try
        {
            //Controlamos que al cargar la ventana modal, se seleccione un id de iniciativa si existe
            initiatives = await InitiativeService.GetInitiatives();
            //Comprobamos si hemos recibido parametros y cargamos la vista para editar
            if(iProjectId != 0)
            {
                Project = await ProjectService.GetById(iProjectId);
            }
            if (Project.IdInitiative == 0)
            {
                if (initiatives.FirstOrDefault() != null)
                {
                    Project.IdInitiative = initiatives.FirstOrDefault().Id;
                }
            }

        }
        catch(Exception e)
        {
            Message = "There was an error..." + e.Message;
        }
    }



    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void OnValidSubmit(EditContext context)
    {

        success = true;
        StateHasChanged();
        if (success)
        {
            Snackbar.Add("Project added", MudBlazor.Severity.Info, a => a.VisibleStateDuration = 200);
            MudDialog.Close(DialogResult.Ok(Project));
        }
    }




}
