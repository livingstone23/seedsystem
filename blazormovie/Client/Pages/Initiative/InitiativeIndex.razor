@page "/initiative"
@inject IInitiativeService InitiativeService
@inject IProjectService ProjectService
@inject IPOSPayService POSPayService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@using OfficeOpenXml;
@using OfficeOpenXml.Style;
@using System.IO
@using blazormovie.Client.Pages.POSPay
@using blazormovie.Client.Pages.Project
@using iText.IO.Font.Constants
@using iText.Kernel.Font
@using iText.Kernel.Pdf
@using iText.Layout
@using iText.Layout.Element
@inject IJSRuntime jsRuntime;
@inject ISnackbar Snackbar


<MudGrid>
    <MudItem xs="12" sm="12" md="12">
    
         <MudTable ServerData="@(new Func<TableState, Task<TableData<Initiative>>>(LoadTodos))"   Hover="true"  @ref="table">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Projects</MudText>
                <MudSpacer />

                <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    
            
                <MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Primary">
                    <MudMenuItem OnClick="@(NewInitiative)" >New Initiative</MudMenuItem>
                    <MudMenuItem OnClick="@(NewProject)">New Project</MudMenuItem>
                    <MudMenuItem OnClick="@(NewPay)">New PO</MudMenuItem>
                </MudMenu>

                <MudMenu Icon="@Icons.Material.Filled.Computer" Color="Color.Success">
                    <a @onclick="exportarPdf" class= "btn btn-secondaryPdf" href="@pdf">PDF</a>
                    <a @onclick="exportarExcel" class= "btn btn-secondary" href="@excel">Excel</a>
                </MudMenu>

            </ToolBarContent>

             <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="id_field" T="Initiative">Id</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="name_field" T="Initiative">Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="des_field" T="Initiative">Description</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="tot_field" T="Initiative">Total Projects</MudTableSortLabel></MudTh>
                
                <MudTh></MudTh>
                <MudTh></MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Desc">@context.Name</MudTd>
                <MudTd DataLabel="Nrmt">@context.Description</MudTd>
                <MudTd DataLabel="Tto">@context.TotalProjects</MudTd>
           
                <MudTd>
                    <MudFab OnClick="@(() => Edit(context.Id))"
                            Color="Color.Primary"
                            Icon="@Icons.Material.Filled.Edit"
                            Size="Size.Small"
                            IconSize="Size.Small">
                    </MudFab>
                </MudTd>
                <MudTd>
                    <MudFab OnClick="@(() => Delete(context.Id))"
                            Color="Color.Secondary"
                            Icon="@Icons.Material.Filled.Delete"
                            Size="Size.Small"
                            IconSize="Size.Small">
                    </MudFab>
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager PageSizeOptions="pageSizeOptions"></MudTablePager>
            </PagerContent>

         </MudTable>
     </MudItem>
</MudGrid>


@code {

    public List<Initiative> Initiatives;
    public string Message { get; set; }
    public string excel = "";
    public string pdf = "";

    private int[] pageSizeOptions = new int[] { 5, 10, 15 };

    private MudTable<Initiative> table;

    private IEnumerable<Initiative> DataPrint = new List<Initiative>();

    private string searchString = null;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        table.SetRowsPerPage(5);
        return base.OnAfterRenderAsync(firstRender);
    }

    public async Task<TableData<Initiative>> LoadTodos(TableState state)
    {


        var response = await InitiativeService.GetByPagination((state.Page + 1), state.PageSize);

        response.Data = response.Data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{element.TotalProjects}".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        //totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "id_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.Id);
                break;
            case "name_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
            case "des_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.Description);
                break;
            case "tot_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.TotalProjects);
                break;
        }


        DataPrint = response.Data;

        return new TableData<Initiative>() { Items = response.Data, TotalItems = response.TotalRecords };
    }


    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }



    protected async Task Edit(int id)
    {
        //creamos objeto dialogparameters para pasarle parametros a la vista modal
        DialogParameters oParam = new DialogParameters();
        oParam.Add("iIniId",id);
        var dialog = DialogService.Show<InitiativeModal>("Edit Initiative",oParam,null);
        
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado
        
        if(!result.Cancelled)
        {
            var Initiative = (Initiative)result.Data;
            if (Initiative.Name != null)
            {
                Initiative.Id = id;
                await  InitiativeService.SaveInitiative(Initiative);
                table.ReloadServerData();
                Snackbar.Add("Initiative has been modified.", MudBlazor.Severity.Success, a => a.VisibleStateDuration = 400);
            }
        }
    }

    protected async Task Delete(int id)
    {
        Initiative initiativefound = new Initiative();
        initiativefound = DataPrint.Where(a => a.Id == id).FirstOrDefault();
        if (initiativefound.TotalProjects > 0)
        {
            Snackbar.Add("You can only delete Initiative without projects", MudBlazor.Severity.Error, a => a.VisibleStateDuration = 350);
            return;
        }
        await InitiativeService.DeleteInitiative(id);
        table.ReloadServerData();
        Snackbar.Add("The Initiative has been deleted.", MudBlazor.Severity.Success, a => a.VisibleStateDuration = 350);


    }

    protected async Task NewInitiative()
    {
        var dialog = DialogService.Show<InitiativeModal>("New Initiative");
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var Initiative = (Initiative)result.Data;
            if (Initiative.Name != null)
            {
                await  InitiativeService.SaveInitiative(Initiative);
                table.ReloadServerData();
                Snackbar.Add("The Initiative has been added.", MudBlazor.Severity.Success, a => a.VisibleStateDuration = 400);
            }
        }

    }

    protected async Task NewProject()
    {
        var dialog = DialogService.Show<ProjectModal>("New Project");
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var Project = (Project)result.Data;
            if (Project.Name != null)
            {
                await ProjectService.SaveProject(Project);
                table.ReloadServerData();
                Snackbar.Add("The Project has been added.", MudBlazor.Severity.Success, a => a.VisibleStateDuration = 400);
            }
        }
    }


    protected async Task NewPay()
    {
        var dialog = DialogService.Show<POSPayModal>("New POSPay");
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var pOSPay = (POSPay)result.Data;
            if (pOSPay.IdInitiative != null)
            {
                await  POSPayService.SavePOSPay(pOSPay);
                table.ReloadServerData();
                Snackbar.Add("The PO has been added.", MudBlazor.Severity.Success, a => a.VisibleStateDuration = 400);
            }
            
        }
    }






    public void exportarPdf()
    {
        using (MemoryStream ms = new MemoryStream())
        {
            PdfWriter writer = new PdfWriter(ms);
            using(var pdfDoc = new PdfDocument(writer))
            {
                PdfFont font = PdfFontFactory.CreateFont(StandardFonts.HELVETICA_BOLD);
                Document doc = new Document(pdfDoc);
                Paragraph p1 = new Paragraph("Report");
                p1.SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER);
                p1.SetFontSize(20);
                doc.Add(p1);
                //creamos las cabeceras
                Table tabla = new Table(3).UseAllAvailableWidth();
                Cell celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("Name")).SetFont(font);
                tabla.AddHeaderCell(celda);
                celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("Description")).SetFont(font);
                tabla.AddHeaderCell(celda);
                celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("Total")).SetFont(font);
                tabla.AddHeaderCell(celda);
                //rellenamos la tabla
                foreach(var item in Initiatives)
                {
                    celda = new Cell();
                    celda.Add(new Paragraph(item.Name.ToString()));
                    tabla.AddCell(celda);
                    celda = new Cell();
                    celda.Add(new Paragraph(item.Description.ToString()));
                    tabla.AddCell(celda);
                     celda = new Cell();
                    celda.Add(new Paragraph(item.Projects.Count().ToString()));
                    tabla.AddCell(celda);
                    celda = new Cell();
                }
                doc.Add(tabla);
                doc.Close();
                writer.Close();
                byte[] buffer = ms.ToArray();
                string base64 = Convert.ToBase64String(buffer);
                pdf = "data:application/pdf;base64,"+base64;
                jsRuntime.InvokeVoidAsync("descargarPdf", pdf);
            }

        }
    }
    public void exportarExcel()
    {
        using(MemoryStream ms = new MemoryStream())
        {
            using (ExcelPackage ep = new ExcelPackage())
            {
                ep.Workbook.Worksheets.Add("hoja");
                //solo para una hoja
                ExcelWorksheet ew = ep.Workbook.Worksheets[0];
                ew.Column(1).Width = 50;
                ew.Cells[1, 1].RichText.Add("Name").Bold = true;
                ew.Column(2).Width = 50;
                ew.Cells[1, 2].RichText.Add("Description").Bold = true;
                ew.Column(3).Width = 50;
                ew.Cells[1, 3].RichText.Add("Total Projects").Bold =true ;
                int fila = 2;
                int colum = 1;
                //List<Initiative> ltInis = Initiatives.ToList();
                foreach(var item in Initiatives)
                {

                    ew.Cells[fila, 1].Value = item.Name.ToString();
                    ew.Cells[fila, 2].Value = item.Description.ToString();
                    ew.Cells[fila, 3].Value = item.TotalProjects.ToString();
                    fila++;
                }

                ep.SaveAs(ms);
                byte[] buffer = ms.ToArray();
                string base64 = Convert.ToBase64String(buffer);
                excel = "data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64," + base64;
            }
         
        }
    }
}