@inject IInitiativeService InitiativeService
@inject ISnackbar Snackbar

<MudDialog> 

    <DialogContent>
         <EditForm Model="@Initiative" OnValidSubmit="@OnValidSubmit" >
             <DataAnnotationsValidator />
             
                 <div style="max-width: 100%;"> 
                    <MudCard>

                        <MudCardContent>
                            <MudTextField T="string" @bind-Value="@Initiative.Name" Label="Name" For="@(() => Initiative.Name)"/>
				            <MudTextField T="string" @bind-Value="@Initiative.Description" Label="Description" For="@(() => Initiative.Description)"/>
                        </MudCardContent>

                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit"  Variant="Variant.Filled" Color="Color.Warning" OnClick="Cancel">Cancel</MudButton>
                            <MudButton ButtonType="ButtonType.Submit"    Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                        </MudCardActions>

                    </MudCard>

                 </div>
         </EditForm>
         

    </DialogContent>

</MudDialog>





@code {

    bool success;

    string[] errors = { };

    public Initiative Initiative = new Initiative();

    public string Message  { get; set; }


    [CascadingParameter] 
    MudDialogInstance MudDialog {get;set;}

    protected async override Task OnInitializedAsync()
    {
        try
        {
                     
            

        }
        catch(Exception e)
        {
            Message = "There was an error..." + e.Message;
        }
    }

    //protected async Task AddInitiative()
    //{
    //    Snackbar.Add("Initiative added", Severity.Success, a => a.VisibleStateDuration = 200);
    //    MudDialog.Close(DialogResult.Ok(Initiative));

    //}

    private void OnValidSubmit(EditContext context)
    {

        success = true;
        StateHasChanged();
        if (success)
        {
            Snackbar.Add("Project added", MudBlazor.Severity.Info, a => a.VisibleStateDuration = 200);
            MudDialog.Close(DialogResult.Ok(Initiative));
        }
    }



    private void Cancel()
    {
        MudDialog.Cancel();
    }


}
