@page "/budget"
@using System.IO
@using blazormovie.Client.Pages.Initiative
@using blazormovie.Client.Pages.POSPay
@using blazormovie.Client.Pages.Project
@inject IInitiativeService InitiativeService
@inject IBudgetService BudgetService
@inject IProjectService ProjectService
@inject IPOSPayService POSPayService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@using OfficeOpenXml
@using iText.IO.Font.Constants
@using iText.Kernel.Font
@using iText.Layout
@using iText.Layout.Element
@using iText.Pdfa;
@using iText.Kernel.Pdf;
@inject IJSRuntime jsRuntime;

<a @onclick="exportarPdf" class= "btn btn-secondaryPdf" href="@pdf">PDF</a>
<a @onclick="exportarExcel" class= "btn btn-secondary" href="@excel">Excel</a>
<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">BUDGET</MudText>
<MudGrid>
    <MudItem xs="12" sm="6" md="4">
        <MudPaper  Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
            <MudIcon Icon="@Icons.Material.Filled.Euro" Color="Color.Primary" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Total Iniciatives</MudText>
                <MudText Typo="Typo.h5">3,125,000</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudPaper  Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
            <MudIcon Icon="@Icons.Material.Filled.Layers" Color="Color.Secondary" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Total Project</MudText>
                <MudText Typo="Typo.h5">150,000</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudPaper  Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
            <MudIcon Icon="@Icons.Material.Filled.Public" Color="Color.Success" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Total Pays</MudText>
                <MudText Typo="Typo.h5">12%</MudText>
            </div>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" sm="12" md="12">
        <MudTable ServerData="@(new Func<TableState, Task<TableData<BudgetDTO>>>(LoadTodos))"   Hover="true"  @ref="table">

        <ToolBarContent>
            <MudText Typo="Typo.h6">PAYS</MudText>
            <MudSpacer />

            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>


            

            <div Class="d-flex justify-space-between align-center">

                <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.FiberNew" OnClick="@(NewInitiative)" Color="Color.Success">Initiative</MudButton>

                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.FiberNew" OnClick="@(NewProject)" Color="Color.Info">Project</MudButton>

                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.FiberNew" OnClick="@(NewPay)" Color="Color.Primary">POSPay</MudButton>
   
            </div>


           

        </ToolBarContent>

             <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="ini_field" T="BudgetDTO">Initiative</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="pro_field" T="BudgetDTO">Project</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="amo_field" T="BudgetDTO">Amount Invoice</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="pos_field" T="BudgetDTO">POsReceived</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="bal_field" T="BudgetDTO">Balance</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="adj_field" T="BudgetDTO">Adjustment</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="fin_field" T="BudgetDTO">FinalBalance</MudTableSortLabel></MudTh>
            </HeaderContent>


            <RowTemplate Context="BudgetContext">
                <MudTd DataLabel="Initiative">@BudgetContext.InitiativeName</MudTd>
                <MudTd DataLabel="Project">@BudgetContext.NameProject</MudTd>
                <MudTd DataLabel="AmountInvoiced">@BudgetContext.AmountInvoiced.ToString("C")</MudTd>
                <MudTd DataLabel="POsReceived">@BudgetContext.POSreceived.ToString()</MudTd>
                <MudTd DataLabel="POsReceived">@BudgetContext.Balance.ToString()</MudTd>
                <MudTd DataLabel="POsReceived">@BudgetContext.Adjustment.ToString()</MudTd>
                <MudTd DataLabel="POsReceived">@BudgetContext.FinalBalance.ToString()</MudTd>
                <MudTd DataLabel="POsReceived">@BudgetContext.Notes.ToString()</MudTd>

            </RowTemplate>

            <PagerContent>
                <MudTablePager PageSizeOptions="pageSizeOptions"></MudTablePager>
            </PagerContent>

        </MudTable>
    </MudItem>
</MudGrid>	




@code {

    //public List<Budget> Budgets;
    //public string Message { get; set; }

    //protected async override Task OnInitializedAsync()
    //{
    //    try
    //    {
    //        Budgets = (List<Budget>)await BudgetService.GetBudgets();
    //    }
    //    catch (Exception e)
    //    {

    //        Message = "Error... " + e.Message;
    //    }
    //}



    private int[] pageSizeOptions = new int[] { 25, 50, 75 };

    private MudTable<BudgetDTO> table;
    private IEnumerable<BudgetDTO> DataPrint = new List<BudgetDTO>();
    public string excel = "";
    public string pdf = "";

    private string searchString = null;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        table.SetRowsPerPage(25);
        return base.OnAfterRenderAsync(firstRender);
    }

    public async Task<TableData<BudgetDTO>> LoadTodos(TableState state)
    {


        var response = await BudgetService.GetByPaginationDto((state.Page + 1), state.PageSize);

        response.Data = response.Data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.InitiativeName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.NameProject.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Notes.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{element.AmountInvoiced} {element.POSreceived} {element.Balance}".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        //totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "ini_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.InitiativeName);
                break;
            case "pro_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.NameProject);
                break;
            case "amo_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.AmountInvoiced);
                break;
            case "pos_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.POSreceived);
                break;
            case "bal_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.Balance);
                break;
            case "adj_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.Adjustment);
                break;
            case "fin_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.FinalBalance);
                break;
        }


        DataPrint = response.Data;
        return new TableData<BudgetDTO>() { Items = response.Data, TotalItems = response.TotalRecords };
    }


    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }



    protected async Task NewProject()
    {
        var dialog = DialogService.Show<ProjectModal>("New Project");
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var Project = (Project)result.Data;
            if (Project.Name != null)
                await ProjectService.SaveProject(Project);
        }

    }

    protected async Task NewInitiative()
    {
        var dialog = DialogService.Show<InitiativeModal>("New Initiative");
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var Initiative = (Initiative)result.Data;
            if (Initiative.Name != null)
                await  InitiativeService.SaveInitiative(Initiative);
        }

    }

    protected async Task NewPay()
    {
        var dialog = DialogService.Show<POSPayModal>("New POSPay");
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var pOSPay = (POSPay)result.Data;
            if (pOSPay.IdInitiative != null)
                await  POSPayService.SavePOSPay(pOSPay);
        }

    }
    public void exportarPdf()
    {
        using (MemoryStream ms = new MemoryStream())
        {
            PdfWriter writer = new PdfWriter(ms);
            using(var pdfDoc = new PdfDocument(writer))
            {
                //Rellenar Pdf
                Document doc = new Document(pdfDoc);

                Paragraph p1 = new Paragraph("Report");
                p1.SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER);
                p1.SetFontSize(20);
                doc.Add(p1);
                //creamos las cabeceras
                PdfFont font = PdfFontFactory.CreateFont(StandardFonts.HELVETICA_BOLD);
                Table tabla = new Table(7).UseAllAvailableWidth();
                Cell celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("Initiative")).SetFont(font);
                tabla.AddHeaderCell(celda);
                celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("Project")).SetFont(font);
                tabla.AddHeaderCell(celda);
                celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("Amount Invoice")).SetFont(font);
                tabla.AddHeaderCell(celda);
                celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("POsReceived")).SetFont(font);
                tabla.AddHeaderCell(celda);
                celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("Balance")).SetFont(font);
                tabla.AddHeaderCell(celda);
                celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("Adjustment")).SetFont(font);
                tabla.AddHeaderCell(celda);       
                celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("FinalBalance")).SetFont(font);
                tabla.AddHeaderCell(celda);
                foreach(var item in DataPrint)
                {
                    celda = new Cell();
                    celda.Add(new Paragraph(item.InitiativeName.ToString()));
                    tabla.AddCell(celda);
                    celda = new Cell();
                    celda.Add(new Paragraph(item.NameProject.ToString()));
                    tabla.AddCell(celda);
                    celda = new Cell();
                    celda.SetHorizontalAlignment(iText.Layout.Properties.HorizontalAlignment.RIGHT);
                    celda.Add(new Paragraph(item.AmountInvoiced.ToString("N2")+" €"));
                    tabla.AddCell(celda);
                    celda = new Cell();
                    celda.Add(new Paragraph(item.POSreceived.ToString("N2")+" €"));
                    tabla.AddCell(celda);
                    celda = new Cell();
                    celda.Add(new Paragraph(item.Balance.ToString("N2")+" €"));
                    tabla.AddCell(celda);
                    celda = new Cell();
                    celda.Add(new Paragraph(item.Adjustment.ToString("N2")+" €"));
                    tabla.AddCell(celda);
                    celda = new Cell();
                    celda.Add(new Paragraph(item.FinalBalance.ToString("N2")+" €"));
                    tabla.AddCell(celda);
                }
                doc.Add(tabla);
                //liberamos memoria
                doc.Close();
                writer.Close();
                //para descargar
                byte[] buffer = ms.ToArray();
                string base64 = Convert.ToBase64String(buffer);
                pdf = "data:application/pdf;base64,"+base64;
                jsRuntime.InvokeVoidAsync("descargarPdf", pdf);
            }

        }
    }
    public void exportarExcel()
    {
        using(MemoryStream ms = new MemoryStream())
        {
            using (ExcelPackage ep = new ExcelPackage())
            {
                ep.Workbook.Worksheets.Add("hoja");
                //solo para una hoja
                ExcelWorksheet ew = ep.Workbook.Worksheets[0];
                ew.Column(1).Width = 50;
                ew.Cells[1, 1].RichText.Add("Initiative").Bold = true;
                ew.Column(2).Width = 50;
                ew.Cells[1, 2].RichText.Add("Project").Bold = true;
                ew.Column(3).Width = 50;
                ew.Cells[1, 3].RichText.Add("Project").Bold =true ;
                ew.Column(4).Width = 50;
                ew.Cells[1, 4].RichText.Add("POsReceived").Bold =true ;
                ew.Column(5).Width = 50;
                ew.Cells[1, 5].RichText.Add("Balance").Bold =true ;
                ew.Column(6).Width = 50;
                ew.Cells[1, 6].RichText.Add("Adjustment").Bold =true ;       
                ew.Column(7).Width = 50;
                ew.Cells[1, 7].RichText.Add("Final Balance").Bold =true ;
                int fila = 2;
                int colum = 1;
                //List<Initiative> ltInis = Initiatives.ToList();
                foreach(var item in DataPrint)
                {

                    ew.Cells[fila, 1].Value = item.InitiativeName.ToString();
                    ew.Cells[fila, 2].Value = item.NameProject.ToString();
                    ew.Cells[fila, 3].Value = item.AmountInvoiced.ToString("N2")+" €";
                    ew.Cells[fila, 4].Value = item.POSreceived.ToString("N2")+" €";
                    ew.Cells[fila, 5].Value = item.Balance.ToString("N2")+" €";
                    ew.Cells[fila, 6].Value = item.Adjustment.ToString("N2")+" €";
                    ew.Cells[fila, 7].Value = item.FinalBalance.ToString("N2")+" €";
                    fila++;
                }

                ep.SaveAs(ms);
                byte[] buffer = ms.ToArray();
                string base64 = Convert.ToBase64String(buffer);
                excel = "data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64," + base64;
            }
        }
    }
}
