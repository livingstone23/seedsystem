@inject IInitiativeService InitiativeService
@inject IProjectService ProjectService
@inject IPOSPayService POSPayService
@inject ISnackbar Snackbar
@inject IMostrarMensajes mostrarMensajes


<MudDialog> 


    <DialogContent>
         <EditForm Model="@POSPay" OnValidSubmit="@OnValidSubmit" >
            <DataAnnotationsValidator />

            <div style="max-width: 100%;">
                 <MudCard>
                    <MudCardContent>

                        <MudTextField T="string" @bind-Value="@POSPay.DescriptionPOS" Label="Description PO" For="@(() => POSPay.DescriptionPOS)"/>
                        
                        <MudTextField T="string" @bind-Value="@POSPay.NumberTransfer" Label="NumberTransfer" For="@(() => POSPay.NumberTransfer)"/>


                        <label for="">Initiative</label>
                        <InputSelect class="form-control" 
                                    Value="@POSPay.IdInitiative"
                                    ValueChanged="((int initiativeId) => InitiativeHasChanged(initiativeId))"
                                    ValueExpression="@(() => POSPay.IdInitiative)"
                                    >
                                    @foreach (var item in initiatives)
                                    {
                                        <option value="@item.Id">@item.Name</option>
                                    }
                        </InputSelect>

                        <label for="">Project</label>
                        <InputSelect class="form-control" 
                                    Value="@POSPay.IdProject"
                                    ValueChanged="@((int projectId) => ProjectHasChanged(projectId))"
                                    ValueExpression="@(() => POSPay.IdProject)"
                        >
                                    @foreach (var item in Projects)
                                    {
                                        <option value="@item.Id">@item.Name</option>
                                    }
                        </InputSelect>

                        <MudDatePicker Label="Day of PO" @bind-Date="POSPay.PayDay"  DateFormat="dd/MM/yyyy" />
                        
                        <MudTextField @bind-Value="POSPay.PayAmount" Label="Pay Amount" Format="F2" Variant="Variant.Text" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Euro" For="@(() => POSPay.PayAmount)"/>


                         <MudCheckBox T="bool" @onclick="@Toggle" Required="true" RequiredError="You must agree" Class="ml-n2" Label="Come from Adjustment!"/>
                         
                         <InputSelect hidden="@(!HideLabel)" class="form-control" @bind-Value="@POSPay.IdPOSPaysAdjust">
                                    @foreach (var item in POSPayAdjust)
                                    {
                                        <option value="@item.Id">@item.DescriptionPOS</option>
                                    }
                         </InputSelect>
                         
                            
                       


                    </MudCardContent>

                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit"  Variant="Variant.Filled" Color="Color.Warning" OnClick="Cancel">Cancel</MudButton>
                        <MudButton ButtonType="ButtonType.Submit"  Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                    </MudCardActions>
                </MudCard>
            </div>

         </EditForm>

    </DialogContent>

   @* <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="AddPOSPays">Add</MudButton>
    </DialogActions>*@

</MudDialog>

@code {

    private bool HideLabel   {get;set;} = false;
    private void Toggle()
    {
        HideLabel =   !HideLabel;
    }      


    bool success;
    public POSPay POSPay = new POSPay();
    public IEnumerable<Initiative> initiatives = new List<Initiative>();
    public IEnumerable<Project> Projects = new List<Project>();
    public IEnumerable<POSPay> POSPayAdjust = new List<POSPay>();
    public Project Project = new Project();
    public int proyectId { get; set; }
    public string Message  { get; set; }
    public int NullProject { get; set; } = 0;
    [Parameter] 
    public int iPoId { get; set; }
    [CascadingParameter] 
    MudDialogInstance MudDialog {get;set;}



    protected async override Task OnInitializedAsync()
    {
        try
        {

            POSPay = new POSPay() { RateChange = 1, CurrencyPay = "EURO", PayDay = DateTime.Now , IdPOSPaysAdjust = null};
            initiatives = await InitiativeService.GetInitiatives();
            Projects = await ProjectService.GetProjects();
            POSPayAdjust = await POSPayService.GetPOSPays();
            if(iPoId != 0)
            {
                POSPay = await POSPayService.GetById(iPoId);
                Projects = await ProjectService.GetByInitiative(POSPay.IdInitiative);
            }

            //if (initiatives != null && initiatives.Any())
            //{
            //    POSPay.IdInitiative = initiatives.FirstOrDefault().Id;

            //    await LoadProjects(POSPay.IdInitiative);
            //}
            if (POSPay.IdInitiative == 0)
            {
                if(initiatives.FirstOrDefault()!= null)
                {
                    POSPay.IdInitiative = initiatives.FirstOrDefault().Id;
                }
            }
      

        }
        catch(Exception e)
        {
            Message = "There was an error..." + e.Message;
        }
    }

    private async Task LoadProjects(int initiativeId)
    {
        Projects = await ProjectService.GetByInitiative(initiativeId);
        if (Projects != null && Projects.Any())
        {
            POSPay.IdProject = Projects.FirstOrDefault().Id;
            
        } else
        {
            POSPay.IdProject = 0;
        }

    }





    protected async Task InitiativeHasChanged(int initiativeId)
    {
        POSPay.IdInitiative = initiativeId;

        if (POSPay.IdInitiative > 0)
        {
            await LoadProjects(POSPay.IdInitiative);
        }


    }

    protected async Task ProjectHasChanged(int projectId)
    {
        if (projectId > 0)
        {
            POSPay.IdProject = projectId;

        }
    }




    protected async Task AddPOSPays()
    {
        Snackbar.Add("POS added", Severity.Success, a => a.VisibleStateDuration = 200);
        MudDialog.Close(DialogResult.Ok(POSPay));
    }



    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void OnValidSubmit(EditContext context)
    {

        if (POSPay.IdInitiative == 0 || POSPay.IdProject == 0)
        {
            Snackbar.Add("You must select a Initiative and a Project", MudBlazor.Severity.Error, a => a.VisibleStateDuration = 350);

            return;
        }

        if (HideLabel == false)
        {
            POSPay.IdPOSPaysAdjust = null;
        }

        success = true;
        StateHasChanged();
        if (success)
        {
            Snackbar.Add("Pay added", MudBlazor.Severity.Info, a => a.VisibleStateDuration = 200);
            MudDialog.Close(DialogResult.Ok(POSPay));
        }
    }

}
