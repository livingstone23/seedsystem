@page "/pospaydetail"
@inject IInitiativeService InitiativeService
@inject IProjectService ProjectService
@inject IPOSPayService POSPayService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService


<p>@Message</p>

@if (POSPay != null && initiatives != null)
{
    <EditForm Model=@POSPay OnValidSubmit="SavePays">


        <div class="card">
            <h5 class="card-header">Pays Details</h5>
            @*cuerpo de la clase*@
            <div class="card-body">
                <div class="container">
                    <div class="row">
                        <div class="col-md-4 mb-3">

                        </div>
                         <div class="col-md-4 mb-3">
                             
                        </div>
                         <div class="col-md-4 mb-3">
                             <input type="submit" class="btn btn-success" value="Save"/>
                             <input type="submit" class="btn btn-secondary" value="Cancel"  @onclick="Cancel" />
                        </div>
                    </div>


                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="">Description PAY</label>
                            <InputText class="form-control" @bind-Value="@POSPay.DescriptionPOS" />
                        </div>
                        
                        <div class="col-md-6 mb-3">
                            <label for="">Number of Transfer</label>
                            <InputText class="form-control" @bind-Value="@POSPay.NumberTransfer" />
                        </div>
                    </div>


                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="">Initiative</label>
                            <InputSelect class="form-control" 
                                        Value="@POSPay.IdInitiative"
                                        ValueChanged="((int initiativeId) => InitiativeHasChanged(initiativeId))"
                                        ValueExpression="@(() => POSPay.IdInitiative)"
                                        >
                                        @foreach (var item in initiatives)
                                        {
                                            <option value="@item.Id">@item.Name</option>
                                        }
                            </InputSelect>
                        </div>
                        
                        <div class="col-md-6 mb-3">
                            <label for="">Project</label>
                            <InputSelect class="form-control" 
                                        Value="@POSPay.IdProject"
                                        ValueChanged="@((int projectId) => ProjectHasChanged(projectId))"
                                        ValueExpression="@(() => POSPay.IdProject)"
                            >
                                        @foreach (var item in Projects)
                                        {
                                            <option value="@item.Id">@item.Name</option>
                                        }
                            </InputSelect>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="">Date of transfer</label>
                           <InputDate class="form-control" @bind-Value="@POSPay.PayDay" />
                        </div>
                        
                        <div class="col-md-6 mb-3">
                            <MudNumericField Label="Pay Amount" @bind-Value="@POSPay.PayAmount" />
                        </div>
                    </div>


                    <div class="row">
           
                        <div class="col-md-4 mb-3">

                        </div>
                        <div class="col-md-4 mb-3">
                        </div>
                        <div class="col-md-4 mb-3">
                                <input type="submit" class="btn btn-secondary" value="New Pay" @onclick="NewPOSPay"/>
                        </div>
                    </div>

               </div>

            </div>
        </div>

    </EditForm>

}
else
{
    <p>Loading...</p>
}



@code {

    public POSPay POSPay; 

    public IEnumerable<Initiative> initiatives = new List<Initiative>();
    public IEnumerable<Project> Projects = new List<Project>();
    public Project Project = new Project();
    public string Message  { get; set; }
    public int proyectId { get; set; }

    [Parameter] 
    public int id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        try
        {

            POSPay = new POSPay() { IdInitiative = 1, RateChange = 1, CurrencyPay = "EURO" };
            initiatives = await InitiativeService.GetInitiatives();
            if (initiatives != null && initiatives.Any())
            {
                POSPay.IdInitiative = initiatives.FirstOrDefault().Id;
                await LoadProjects(POSPay.IdInitiative);
            }

        }
        catch(Exception e)
        {
            Message = "There was an error..." + e.Message;
        }
    }


    protected async Task InitiativeHasChanged(int initiativeId)
    {
        POSPay.IdInitiative = initiativeId;

        if (POSPay.IdInitiative > 0)
        {
            await LoadProjects(POSPay.IdInitiative);
        }
        

    }


    private async Task LoadProjects(int initiativeId)
    {
        Projects = await ProjectService.GetByInitiative(initiativeId);
        if (Projects != null && Projects.Any())
        {
            POSPay.IdProject = Projects.FirstOrDefault().Id;
        }

    }


    protected async Task SavePays()
    {
        await POSPayService.SavePOSPay(POSPay);
        if(POSPay.NumberTransfer != null)
        {
            NavigateToHome();
        }

    }


    protected async Task ProjectHasChanged(int projectId)
    {
        if (projectId > 0)
        {
            POSPay.IdProject = projectId;

            //Project = await ProjectService.GetById(projectId);
            //POSPay.IdProject = Project.Id;
        }
    }


    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }


    protected void Cancel()
    {
        NavigateToHome();
    }


    protected async Task NewPOSPay()
    {
        var dialog = DialogService.Show<POSPayModal>("New Pay");
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var POSPay = (POSPay)result.Data;
            if (POSPay.NumberTransfer != null)
                await POSPayService.SavePOSPay(POSPay);
        }
    }

}
