@page "/pospays"
@using System.Net.Http.Json;
@using System.IO
@inject IPOSPayService POSPayService
@using OfficeOpenXml
@using blazormovie.Client.Pages.Initiative
@using blazormovie.Client.Pages.Project
@using iText.IO.Font.Constants
@using iText.Kernel.Font
@using iText.Layout
@using iText.Layout.Element
@using iText.Pdfa;
@using iText.Kernel.Pdf;
@inject IJSRuntime jsRuntime;
@inject IDialogService DialogService
@inject IProjectService ProjectService
@inject IInitiativeService InitiativeService
@inject ISnackbar Snackbar


<MudGrid>

    <MudItem xs="12" sm="12" md="12">
        <MudTable ServerData="@(new Func<TableState, Task<TableData<POSPayDTO>>>(LoadTodos))"   Hover="true"  @ref="table">

        <ToolBarContent>
            <MudText Typo="Typo.h6">PAYS</MudText>
            <MudSpacer />

            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    
            <MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Primary">
                <MudMenuItem OnClick="@(NewInitiative)" >New Initiative</MudMenuItem>
                <MudMenuItem OnClick="@(NewProject)">New Project</MudMenuItem>
                <MudMenuItem OnClick="@(NewPay)">New PO</MudMenuItem>
            </MudMenu>

            <MudMenu Icon="@Icons.Material.Filled.Computer" Color="Color.Success">
                <a @onclick="exportarPdf" class= "btn btn-secondaryPdf" href="@pdf">PDF</a>
                <a @onclick="exportarExcel" class= "btn btn-secondary" href="@excel">Excel</a>
            </MudMenu>

        </ToolBarContent>

        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="id_field" T="POSPayDTO">Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="desc_field" T="POSPayDTO">DescriptionPOS</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="nrmt_field" T="POSPayDTO">NroTransfer</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="pay_field" T="POSPayDTO">Amount Pay</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="day_field" T="POSPayDTO">DayPay</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="init_field" T="POSPayDTO">Initiative</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="proj_field" T="POSPayDTO">Project</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
            <MudTh></MudTh>
        </HeaderContent>


        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Desc">@context.DescriptionPOS</MudTd>
            <MudTd DataLabel="Nrmt">@context.NumberTransfer</MudTd>
            <MudTd DataLabel="Pay" Style="text-align:center">@context.PayAmount.ToString("N2") €</MudTd>
            <MudTd DataLabel="Day">@context.PayDay.ToShortDateString()</MudTd>
            <MudTd DataLabel="Init">@context.InitiativeName</MudTd>
            <MudTd DataLabel="Proj">@context.ProjectName</MudTd>

            <MudTd>
                <MudFab OnClick="@(() => Edit(context.Id))"
                        Color="Color.Primary"
                        Icon="@Icons.Material.Filled.Edit"
                        Size="Size.Small"
                        IconSize="Size.Small">
                </MudFab>
            </MudTd>
            <MudTd>
                <MudFab OnClick="@(() => Delete(context.Id))"
                        Color="Color.Secondary"
                        Icon="@Icons.Material.Filled.Delete"
                        Size="Size.Small"
                        IconSize="Size.Small">
                </MudFab>
            </MudTd>
        
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="pageSizeOptions"></MudTablePager>
        </PagerContent>
        </MudTable>
    </MudItem>

</MudGrid>	





@code {



    //private int[] pageSizeOptions = new int[] { 5, 10, 15 };
    private int[] pageSizeOptions = new int[] { 15 };

    private MudTable<POSPayDTO> table;

    private IEnumerable<POSPayDTO> DataPrint = new List<POSPayDTO>();

    public string excel = "";
    public string pdf = "";


    private string searchString = null;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        table.SetRowsPerPage(15);
        return base.OnAfterRenderAsync(firstRender);
    }

    public async Task<TableData<POSPayDTO>> LoadTodos(TableState state)
    {


        var response = await POSPayService.GetByPaginationDto((state.Page + 1), state.PageSize);

        response.Data = response.Data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.DescriptionPOS.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.NumberTransfer.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{element.ProjectName} {element.InitiativeName} {element.PayAmount}".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        //totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "id_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.Id);
                break;
            case "desc_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.DescriptionPOS);
                break;
            case "nrmt_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.NumberTransfer);
                break;
            case "pay_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.PayAmount);
                break;
            case "day_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.PayDay);
                break;
            case "init_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.InitiativeName);
                break;
            case "proj_field":
                response.Data = response.Data.OrderByDirection(state.SortDirection, o => o.ProjectName);
                break;
        }


        DataPrint = response.Data;

        return new TableData<POSPayDTO>() { Items = response.Data, TotalItems = response.TotalRecords };
    }


    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }


    public void exportarExcel()
    {
        using(MemoryStream ms = new MemoryStream())
        {
            using (ExcelPackage ep = new ExcelPackage())
            {
                ep.Workbook.Worksheets.Add("hoja");
                //solo para una hoja
                ExcelWorksheet ew = ep.Workbook.Worksheets[0];
                ew.Column(1).Width = 50;
                ew.Cells[1, 1].RichText.Add("Description").Bold = true;
                ew.Column(2).Width = 50;
                ew.Cells[1, 2].RichText.Add("No.Transfer").Bold = true;
                ew.Column(3).Width = 50;
                ew.Cells[1, 3].RichText.Add("Amount Pay").Bold =true ;
                ew.Column(4).Width = 50;
                ew.Cells[1, 4].RichText.Add("Date of Po").Bold =true ;
                ew.Column(5).Width = 50;
                ew.Cells[1, 5].RichText.Add("Initiative").Bold =true ;
                ew.Column(6).Width = 50;
                ew.Cells[1, 6].RichText.Add("Project").Bold =true ;
                int fila = 2;
                int colum = 1;
                //List<Initiative> ltInis = Initiatives.ToList();
                foreach(var item in DataPrint)
                {

                    ew.Cells[fila, 1].Value = item.DescriptionPOS.ToString();
                    ew.Cells[fila, 2].Value = item.NumberTransfer.ToString();
                    ew.Cells[fila, 3].Value = item.PayAmount.ToString("N2")+" €";
                    ew.Cells[fila, 4].Value = item.PayDay.ToString();
                    ew.Cells[fila, 5].Value = item.InitiativeName.ToString();
                    ew.Cells[fila, 6].Value = item.ProjectName.ToString();
                    fila++;
                }

                ep.SaveAs(ms);
                byte[] buffer = ms.ToArray();
                string base64 = Convert.ToBase64String(buffer);
                excel = "data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64," + base64;
            }

        }
    }
    public void exportarPdf()
    {
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        using (MemoryStream ms = new MemoryStream())
        {
            PdfWriter writer = new PdfWriter(ms);
            using(var pdfDoc = new PdfDocument(writer))
            {
                //Rellenar Pdf
                Document doc = new Document(pdfDoc);

                Paragraph p1 = new Paragraph("Report");
                p1.SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER);
                p1.SetFontSize(20);
                doc.Add(p1);
                //creamos las cabeceras
                PdfFont font = PdfFontFactory.CreateFont(StandardFonts.HELVETICA_BOLD);
                Table tabla = new Table(6).UseAllAvailableWidth();
                Cell celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("Description")).SetFont(font);
                tabla.AddHeaderCell(celda);
                celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("No.Transfer")).SetFont(font);
                tabla.AddHeaderCell(celda);
                celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("Amount Pay")).SetFont(font);
                tabla.AddHeaderCell(celda);
                celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("Date of Po")).SetFont(font);
                tabla.AddHeaderCell(celda);
                celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("Initiative")).SetFont(font);
                tabla.AddHeaderCell(celda);
                celda = new Cell().SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY);
                celda.Add(new Paragraph("Project")).SetFont(font);
                tabla.AddHeaderCell(celda);
                foreach(var item in DataPrint)
                {
                    celda = new Cell();
                    celda.Add(new Paragraph(item.DescriptionPOS.ToString()));
                    tabla.AddCell(celda);
                    celda = new Cell();
                    celda.Add(new Paragraph(item.NumberTransfer.ToString()));
                    tabla.AddCell(celda);
                    celda = new Cell();
                    celda.SetHorizontalAlignment(iText.Layout.Properties.HorizontalAlignment.RIGHT);
                    celda.Add(new Paragraph(item.PayAmount.ToString("N2")+" €"));
                    tabla.AddCell(celda);
                    celda = new Cell();
                    celda.Add(new Paragraph(item.PayDay.ToString()));
                    tabla.AddCell(celda);
                    celda = new Cell();
                    celda.Add(new Paragraph(item.InitiativeName.ToString()));
                    tabla.AddCell(celda);
                    celda = new Cell();
                    celda.Add(new Paragraph(item.ProjectName.ToString()));
                    tabla.AddCell(celda);
                }
                doc.Add(tabla);
                //liberamos memoria
                doc.Close();
                writer.Close();
                //para descargar
                byte[] buffer = ms.ToArray();
                string base64 = Convert.ToBase64String(buffer);
                pdf = "data:application/pdf;base64,"+base64;
                jsRuntime.InvokeVoidAsync("descargarPdf", pdf);
            }

        }
    }



    protected async Task NewInitiative()
    {
        var dialog = DialogService.Show<InitiativeModal>("New Initiative");
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var Initiative = (Initiative)result.Data;
            if (Initiative.Name != null)
            {
                await  InitiativeService.SaveInitiative(Initiative);
                Snackbar.Add("The Initiative has been added.", MudBlazor.Severity.Success, a => a.VisibleStateDuration = 400);
            }
        }

    }

    protected async Task NewProject()
    {
        var dialog = DialogService.Show<ProjectModal>("New Project");
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var Project = (Project)result.Data;
            if (Project.Name != null)
            {
                await ProjectService.SaveProject(Project);
                Snackbar.Add("The Project has been added.", MudBlazor.Severity.Success, a => a.VisibleStateDuration = 400);
            }

        }

    }

    protected async Task NewPay()
    {
        var dialog = DialogService.Show<POSPayModal>("New POSPay");

        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var pOSPay = (POSPay)result.Data;
            if (pOSPay.IdInitiative != null)
            {
                await  POSPayService.SavePOSPay(pOSPay);
                Snackbar.Add("The PO has been added.", MudBlazor.Severity.Success, a => a.VisibleStateDuration = 400);
                table.ReloadServerData();
            }

        }

    }

    protected async Task Delete(int id)
    {
        await POSPayService.DeletePOSPay(id);
        table.ReloadServerData();
        Snackbar.Add("The PO has been deleted.", MudBlazor.Severity.Success, a => a.VisibleStateDuration = 400);
    }

    protected async Task Edit(int id)
    {


        
        //creamos objeto dialogparameters para pasarle parametros a la vista modal
        DialogParameters oParam = new DialogParameters();
        oParam.Add("iPoId",id);
        var dialog = DialogService.Show<POSPayModal>("Edit Po",oParam,null);
       
        var result = await dialog.Result;   //Hilo de ejecucion espera el resultado

        if(!result.Cancelled)
        {
            var pOSPay = (POSPay)result.Data;
            if (pOSPay.IdInitiative != null)
            {
                pOSPay.Id = id;
                await  POSPayService.SavePOSPay(pOSPay);
                Snackbar.Add("PO has been modified.", MudBlazor.Severity.Success, a => a.VisibleStateDuration = 400);
                table.ReloadServerData();
            }
        }
    }


}
